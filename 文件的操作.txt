git status 可以让我们时刻掌握仓库的状态
git diff filename 比较工作区中的文件和stage中的区别



要随时掌握工作区的状态，使用git status命令。


如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

git log查看历史记录，可以加参数 --pretty=oneline

git reset --hard HEAD^ 版本回退。（往旧的版本方向）
Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

git reset --hard commit-id（sha1值）

Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向前一个版本


Git提供了一个命令git reflog用来记录你的每一次命令：(所以在git中可以随意时光穿梭，不要担心找不到版本的commit-id))




现在总结一下：

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。


穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。


要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。



git管理的是修改。不是文件。
第一次修改 -> git add -> 第二次修改 -> git commit
Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。

现在，你又理解了Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。

提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：



命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
git checkout -- file命令中的--很重要，没有--，就变成了“创建一个新分支”的命令
总之，就是让这个文件回到最近一次git commit或git add时的状态。



小结

又到了小结时间。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库



命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。